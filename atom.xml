<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mapicccy</title>
  
  <subtitle>记录、分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-09T08:51:21.778Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mapicccy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>venice rc分支延时测试</title>
    <link href="http://yoursite.com/uncategorized/2019-12-09-venice-rc%E5%88%86%E6%94%AF%E5%BB%B6%E6%97%B6%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/uncategorized/2019-12-09-venice-rc%E5%88%86%E6%94%AF%E5%BB%B6%E6%97%B6%E6%B5%8B%E8%AF%95/</id>
    <published>2019-12-09T06:13:56.000Z</published>
    <updated>2019-12-09T08:51:21.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="venice-rc分支延时测试"><a href="#venice-rc分支延时测试" class="headerlink" title="venice rc分支延时测试"></a>venice rc分支延时测试</h1><p>针对<code>venice</code>驱动从<code>venice_make_request</code>开始的读写流程分10段进行<code>latency</code>测试，测试结果通过二维数组的形式记录在<code>struct venice</code>中，二维数组的第0维代表读写（0号索引为读流程，1号索引为写流程），第1维代表分段延时，如下所示：</p><p><code>struct venice {</code><br><code>#ifdef CONFIG_VENICE_DEBUG_STEP_LAT</code><br>    <code>int sbio_watch_count[2][RECORD_LAT_STEP];</code><br>    <code>long sbio_sum_lat[2][RECORD_LAT_STEP];</code><br>    <code>long sbio_max_lat[2][RECORD_LAT_STEP];</code><br>    <code>int req_watch_count[2][RECORD_LAT_STEP];</code><br>    <code>long req_sum_lat[2][RECORD_LAT_STEP];</code><br>    <code>long req_max_lat[2][RECORD_LAT_STEP];</code><br><code>#endif</code><br>    <code>struct nvm_target *tgt; /* target dev */</code></p><a id="more"></a><p> <code>struct nvm_dev *bdev; /* back dev */</code></p><p>​    <code>...</code></p><p><code>}</code></p><p>十段延迟分别为（以写流程为例）：</p><ol><li>从刚进入<code>venice_make_request</code>到<code>venice_convert_io</code>结束：刚进入<code>venice_make_request</code>时，调用<code>venice_getnstimeofday</code>获取纳秒计数的时间，在<code>venice_convert_io</code>之后调用<code>venice_sbio_checkpoint</code>做第0次统计；</li><li>从<code>venice_convert_io</code>结束到刚进入<code>venice_submit_bio</code>：这段<code>latency</code>应该非常小；</li><li>从刚进入<code>venice_submit_bio</code>到分配<code>request</code>之前；</li><li>从分配<code>request</code>到<code>venice_queue_work</code>工作队列处理线程<code>lnvm</code>执行<code>venice_task</code>：调用链为，<code>venice_task</code>-&gt;<code>venice_send_write_cmd</code>-&gt;<code>nvme_nvm_submit_bio</code>，在<code>nvme_submit_async_cmd</code>之前；</li><li>从<code>nvme_submit_async_cmd</code>到所有<code>request</code>处理完成，<code>balance_gc</code>之前；</li><li>从<code>nvme_submit_async_cmd</code>到刚进入<code>submit_io_completion_fn</code>：<code>submit_io_completion_fn</code>为IO流程的回调函数，由<code>lnvm</code>内核线程调用<code>nvme_kthread</code>-&gt;<code>nvme_process_cq</code>-&gt;循环调用回调<code>fn</code>；</li><li>从刚进入<code>submit_io_completion_fn</code>到<code>sbio_release</code>：<code>submit_io_completion_fn</code>通过<code>cmdinfo</code>的回调函数<code>venice_cmdinfo_callback</code>-&gt;<code>__venice_cmdinfo_callback</code>-&gt;<code>sbio_release</code>；</li><li>从<code>sbio_release</code>到<code>venice_end_io_acct</code>结束：调用流程，<code>fs_bio_write_callback</code>（sbio的callback)-&gt;<code>venice_complete_fs_io</code>-&gt;<code>venice_end_io_acct</code>；</li><li>从<code>venice_end_io_acct</code>到<code>venice_bio_endio</code>结束；</li><li>从<code>venice_bio_endio</code>结束到<code>venice_complete_fs_io</code>结束：延时几乎为0。</li></ol><p><strong>注意： 1. 由于<code>nvme</code>并没有venice结构，所以latency数据无法记录，采用在request结构中增加两个timespec结构作为临时记录； 2. 由于读写流程为异步操作，所以上文的第5\6步所有request处理完成之后IO流程并没有结束</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;venice-rc分支延时测试&quot;&gt;&lt;a href=&quot;#venice-rc分支延时测试&quot; class=&quot;headerlink&quot; title=&quot;venice rc分支延时测试&quot;&gt;&lt;/a&gt;venice rc分支延时测试&lt;/h1&gt;&lt;p&gt;针对&lt;code&gt;venice&lt;/code&gt;驱动从&lt;code&gt;venice_make_request&lt;/code&gt;开始的读写流程分10段进行&lt;code&gt;latency&lt;/code&gt;测试，测试结果通过二维数组的形式记录在&lt;code&gt;struct venice&lt;/code&gt;中，二维数组的第0维代表读写（0号索引为读流程，1号索引为写流程），第1维代表分段延时，如下所示：&lt;/p&gt;&lt;p&gt;&lt;code&gt;struct venice {&lt;/code&gt;&lt;br&gt;&lt;code&gt;#ifdef CONFIG_VENICE_DEBUG_STEP_LAT&lt;/code&gt;&lt;br&gt;    &lt;code&gt;int sbio_watch_count[2][RECORD_LAT_STEP];&lt;/code&gt;&lt;br&gt;    &lt;code&gt;long sbio_sum_lat[2][RECORD_LAT_STEP];&lt;/code&gt;&lt;br&gt;    &lt;code&gt;long sbio_max_lat[2][RECORD_LAT_STEP];&lt;/code&gt;&lt;br&gt;    &lt;code&gt;int req_watch_count[2][RECORD_LAT_STEP];&lt;/code&gt;&lt;br&gt;    &lt;code&gt;long req_sum_lat[2][RECORD_LAT_STEP];&lt;/code&gt;&lt;br&gt;    &lt;code&gt;long req_max_lat[2][RECORD_LAT_STEP];&lt;/code&gt;&lt;br&gt;&lt;code&gt;#endif&lt;/code&gt;&lt;br&gt;    &lt;code&gt;struct nvm_target *tgt; /* target dev */&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ssd" scheme="http://yoursite.com/tags/ssd/"/>
    
  </entry>
  
  <entry>
    <title>linux scatterlist详解</title>
    <link href="http://yoursite.com/uncategorized/linux-scatterlist%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/uncategorized/linux-scatterlist%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-12-04T06:02:50.000Z</published>
    <updated>2019-12-04T06:02:50.503Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vim实用配置文件</title>
    <link href="http://yoursite.com/uncategorized/vim%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/uncategorized/vim%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2019-12-03T06:47:39.000Z</published>
    <updated>2019-12-03T06:50:35.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="辛苦整理，转载请注明原文地址"><a href="#辛苦整理，转载请注明原文地址" class="headerlink" title="辛苦整理，转载请注明原文地址"></a>辛苦整理，转载请注明原文地址</h2><p>set nocompatible<br>filetype on</p><p>hi Normal ctermfg=252 ctermbg=none</p><p>set rtp+=~/.vim/bundle/Vundle.vim<br>call vundle#begin()</p><p>“ 这里根据自己需要的插件来设置，以下是我的配置 “<br>“<br>“ YouCompleteMe:语句补全插件<br>set runtimepath+=<del>/.vim/bundle/YouCompleteMe<br>autocmd InsertLeave * if pumvisible() == 0|pclose|endif “离开插入模式后自动关闭预览窗口”<br>let g:ycm_collect_identifiers_from_tags_files = 1           “ 开启 YCM基于标签引擎<br>let g:ycm_collect_identifiers_from_comments_and_strings = 1 “ 注释与字符串中的内容也用于补全<br>let g:syntastic_ignore_files=[“.*.py$”]<br>let g:ycm_seed_identifiers_with_syntax = 1                  “ 语法关键字补全<br>let g:ycm_complete_in_comments = 1<br>let g:ycm_confirm_extra_conf = 0                            “ 关闭加载.ycm_extra_conf.py提示<br>let g:ycm_key_list_select_completion = [‘<c-n>‘, ‘<down>‘]  “ 映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.<br>let g:ycm_key_list_previous_completion = [‘<c-p>‘, ‘<up>‘]<br>let g:ycm_complete_in_comments = 1                          “ 在注释输入中也能补全<br>let g:ycm_complete_in_strings = 1                           “ 在字符串输入中也能补全<br>let g:ycm_collect_identifiers_from_comments_and_strings = 1 “ 注释和字符串中的文字也会被收入补全<br>let g:ycm_global_ycm_extra_conf=’</up></c-p></down></c-n></del>/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py’<br>let g:ycm_show_diagnostics_ui = 0                           “ 禁用语法检查<br>inoremap <expr> <cr> pumvisible() ? “&lt;C-y&gt;” : “&lt;CR&gt;”             “ 回车即选中当前项<br>nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<cr>     “ 跳转到定义处<br>let g:ycm_min_num_of_chars_for_completion=2                 “ 从第2个键入字符就开始罗列匹配项<br>“</cr></c-j></cr></expr></p><a id="more"></a><p>“ github 仓库中的插件 “<br>Plugin ‘VundleVim/Vundle.vim’</p><p>Plugin ‘vim-airline/vim-airline’<br>“vim-airline配置:优化vim界面”<br>“let g:airline#extensions#tabline#enabled = 1<br>“ airline设置<br>“ 显示颜色<br>set t_Co=256<br>set laststatus=2<br>“ 使用powerline打过补丁的字体<br>let g:airline_powerline_fonts = 1<br>“ 开启tabline<br>let g:airline#extensions#tabline#enabled = 1<br>“ tabline中当前buffer两端的分隔字符<br>let g:airline#extensions#tabline#left_sep = ‘ ‘<br>“ tabline中未激活buffer两端的分隔字符<br>let g:airline#extensions#tabline#left_alt_sep = ‘ ‘<br>“ tabline中buffer显示编号<br>let g:airline#extensions#tabline#buffer_nr_show = 1<br>“ 映射切换buffer的键位<br>nnoremap [b :bp<cr><br>nnoremap ]b :bn<cr><br>“ 映射<leader>num到num buffer<br>map <leader>1 :b 1<cr><br>map <leader>2 :b 2<cr><br>map <leader>3 :b 3<cr><br>map <leader>4 :b 4<cr><br>map <leader>5 :b 5<cr><br>map <leader>6 :b 6<cr><br>map <leader>7 :b 7<cr><br>map <leader>8 :b 8<cr><br>map <leader>9 :b 9<cr></cr></leader></cr></leader></cr></leader></cr></leader></cr></leader></cr></leader></cr></leader></cr></leader></cr></leader></leader></cr></cr></p><p>“ vim-scripts 中的插件 “<br>Plugin ‘taglist.vim’<br>“ctags 配置:F3快捷键显示程序中的各种tags，包括变量和函数等。<br>map <f3> :TlistToggle<cr><br>let Tlist_Use_Right_Window=1<br>let Tlist_Show_One_File=1<br>let Tlist_Exit_OnlyWindow=1<br>let Tlist_WinWidt=25</cr></f3></p><p>Plugin ‘The-NERD-tree’<br>“NERDTree 配置:F2快捷键显示当前目录树<br>map <f2> :NERDTreeToggle<cr><br>let NERDTreeWinSize=25 </cr></f2></p><p>Plugin ‘indentLine.vim’<br>Plugin ‘delimitMate.vim’</p><p>“ 非 github 仓库的插件”<br>“ Plugin ‘git://git.wincent.com/command-t.git’<br>“ 本地仓库的插件 “</p><p>call vundle#end()</p><p>“””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””<br>“””””新文件标题<br>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””<br>“新建.c,.h,.sh,.java文件，自动插入文件头<br>autocmd BufNewFile <em>.cpp,</em>.[ch],<em>.sh,</em>.java exec “:call SetTitle()”<br>“”定义函数SetTitle，自动插入文件头<br>func SetTitle()<br>    “如果文件类型为.sh文件<br>    if &amp;filetype == ‘sh’<br>        call setline(1, “##########################################################################”)<br>        call append(line(“.”), “# File Name: “.expand(“%”))<br>        call append(line(“.”)+1, “# Author: amoscykl”)<br>        call append(line(“.”)+2, “# mail: <a href="mailto:amoscykl980629@163.com" target="_blank" rel="noopener">amoscykl980629@163.com</a>“)<br>        call append(line(“.”)+3, “# Created Time: “.strftime(“%c”))<br>        call append(line(“.”)+4, “#########################################################################”)<br>        call append(line(“.”)+5, “#!/bin/zsh”)<br>        call append(line(“.”)+6, “PATH=/home/edison/bin:/home/edison/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/work/tools/gcc-3.4.5-glibc-2.3.6/bin”)<br>        call append(line(“.”)+7, “export PATH”)<br>        call append(line(“.”)+8, “”)<br>    else<br>        call setline(1, “/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>“)<br>        call append(line(“.”), “    &gt; File Name: “.expand(“%”))<br>        call append(line(“.”)+1, “    &gt; Author: amoscykl”)<br>        call append(line(“.”)+2, “    &gt; Mail: <a href="mailto:amoscykl@163.com" target="_blank" rel="noopener">amoscykl@163.com</a> “)<br>        call append(line(“.”)+3, “    &gt; Created Time: “.strftime(“%c”))<br>        call append(line(“.”)+4, “ <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/“)<br>        call append(line(“.”)+5, “”)<br>    endif<br>    if &amp;filetype == ‘cpp’<br>        call append(line(“.”)+6, “#include<iostream>“)<br>        call append(line(“.”)+7, “using namespace std;”)<br>        call append(line(“.”)+8, “”)<br>    endif<br>    if &amp;filetype == ‘c’<br>        call append(line(“.”)+6, “#include&lt;stdio.h&gt;”)<br>        call append(line(“.”)+7, “”)<br>    endif<br>    “    if &amp;filetype == ‘java’<br>    “        call append(line(“.”)+6,”public class “.expand(“%”))<br>    “        call append(line(“.”)+7,””)<br>    “    endif<br>    “新建文件后，自动定位到文件末尾<br>    autocmd BufNewFile * normal G<br>endfunc<br>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””<br>“键盘命令<br>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””</iostream></p><p>nmap <leader>w :w!<cr><br>nmap <leader>f :find<cr></cr></leader></cr></leader></p><p>“ 映射全选+复制 ctrl+a<br>map <c-a> ggVGY<br>map! <c-a> <esc>ggVGY<br>map <f12> gg=G<br>“ 选中状态下 Ctrl+c 复制<br>vmap <c-c> “+y</c-c></f12></esc></c-a></c-a></p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””<br>“”实用设置<br>“””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””<br>“ 设置当文件被改动时自动载入<br>set autoread<br>“ quickfix模式<br>autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr><br>“代码补全<br>set completeopt=preview,menu<br>“允许插件<br>filetype plugin on<br>“共享剪贴板<br>set clipboard=unnamed<br>“从不备份<br>set nobackup<br>“make 运行<br>:set makeprg=g++\ -Wall\ \ %<br>“自动保存<br>set autowrite<br>set ruler                   “ 打开状态栏标尺<br>set cursorline              “ 突出显示当前行<br>set magic                   “ 设置魔术<br>set guioptions-=T           “ 隐藏工具栏<br>set guioptions-=m           “ 隐藏菜单栏<br>“set statusline=\ %&lt;%F[%1<em>%M%</em>%n%R%H]%=\ %y\ %0(%{&amp;fileformat}\ %{&amp;encoding}\ %c:%l/%L%)<br>“ 设置在状态行显示的信息<br>“ set foldcolumn=0<br>“ set foldmethod=indent<br>“ set foldlevel=3<br>“ set foldenable              “ 开始折叠<br>“ 不要使用vi的键盘模式，而是vim自己的<br>set nocompatible<br>“ 语法高亮<br>set syntax=on<br>“ 去掉输入错误的提示声音<br>set noeb<br>“ 在处理未保存或只读文件的时候，弹出确认<br>set confirm<br>“ 自动缩进<br>set autoindent<br>set cindent<br>“ Tab键的宽度<br>set tabstop=4<br>“ 统一缩进为4<br>set softtabstop=4<br>set shiftwidth=4<br>“ 不要用空格代替制表符<br>set noexpandtab<br>“ 在行和段开始处使用制表符<br>set smarttab<br>“ 显示行号<br>set number<br>“ 历史记录数<br>set history=1000<br>“禁止生成临时文件<br>set nobackup<br>set noswapfile<br>“搜索忽略大小写<br>set ignorecase<br>“搜索逐字符高亮<br>set hlsearch<br>set incsearch<br>“行内替换<br>set gdefault<br>“编码设置<br>set enc=utf-8<br>set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936<br>“语言设置<br>set langmenu=zh_CN.UTF-8<br>set helplang=cn<br>“ 我的状态行显示的内容（包括文件类型和解码）<br>set statusline=%F%m%r%h%w\ [FORMAT=%{&amp;ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(&quot;%d/%m/%y\ -\ %H:%M&quot;)}<br>set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]<br>“ 总是显示状态行<br>set laststatus=2<br>“ 命令行（在状态行下）的高度，默认为1，这里是2<br>set cmdheight=2<br>“ 侦测文件类型<br>filetype on<br>“ 载入文件类型插件<br>filetype plugin on<br>“ 为特定文件类型载入相关缩进文件<br>filetype indent on<br>“ 保存全局变量<br>set viminfo+=!<br>“ 带有如下符号的单词不要被换行分割<br>set iskeyword+=_,$,@,%,#,-<br>“ 字符间插入的像素行数目<br>set linespace=0<br>“ 增强模式中的命令行自动完成操作<br>set wildmenu<br>“ 使回格键（backspace）正常处理indent, eol, start等<br>set backspace=2<br>“ 允许backspace和光标键跨越行边界<br>set whichwrap+=&lt;,&gt;,h,l<br>“ 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）<br>set mouse=a<br>set selection=exclusive<br>set selectmode=mouse,key<br>“ 通过使用: commands命令，告诉我们文件的哪一行被改变过<br>set report=0<br>“ 在被分割的窗口间显示空白，便于阅读<br>set fillchars=vert:\ ,stl:\ ,stlnc:<br>“ 高亮显示匹配的括号<br>set showmatch<br>“ 匹配括号高亮的时间（单位是十分之一秒）<br>set matchtime=1<br>“ 光标移动到buffer的顶部和底部时保持3行距离<br>set scrolloff=3<br>“ 为C程序提供自动缩进<br>set smartindent<br>“ 高亮显示普通txt文件（需要txt.vim脚本）<br> au BufRead,BufNewFile *  setfiletype txt<br>“自动补全<br>:inoremap ( ()<esc>i<br>:inoremap ) <c-r>=ClosePair(‘)’)<cr><br>“:inoremap { {<cr>}<esc>O<br>“:inoremap } <c-r>=ClosePair(‘}’)<cr><br>:inoremap [ []<esc>i<br>:inoremap ] <c-r>=ClosePair(‘]’)<cr><br>:inoremap “ “”<esc>i<br>:inoremap ‘ ‘’<esc>i<br>function! ClosePair(char)<br>    if getline(‘.’)[col(‘.’) - 1] == a:char<br>        return “&lt;Right&gt;”<br>    else<br>        return a:char<br>    endif<br>endfunction<br>filetype plugin indent on<br>“打开文件类型检测, 加了这句才可以用智能补全<br>set completeopt=longest,menu</esc></esc></cr></c-r></esc></cr></c-r></esc></cr></cr></c-r></esc></cr></cr></space></leader></buffer></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;辛苦整理，转载请注明原文地址&quot;&gt;&lt;a href=&quot;#辛苦整理，转载请注明原文地址&quot; class=&quot;headerlink&quot; title=&quot;辛苦整理，转载请注明原文地址&quot;&gt;&lt;/a&gt;辛苦整理，转载请注明原文地址&lt;/h2&gt;&lt;p&gt;set nocompatible&lt;br&gt;filetype on&lt;/p&gt;&lt;p&gt;hi Normal ctermfg=252 ctermbg=none&lt;/p&gt;&lt;p&gt;set rtp+=~/.vim/bundle/Vundle.vim&lt;br&gt;call vundle#begin()&lt;/p&gt;&lt;p&gt;“ 这里根据自己需要的插件来设置，以下是我的配置 “&lt;br&gt;“&lt;br&gt;“ YouCompleteMe:语句补全插件&lt;br&gt;set runtimepath+=&lt;del&gt;/.vim/bundle/YouCompleteMe&lt;br&gt;autocmd InsertLeave * if pumvisible() == 0|pclose|endif “离开插入模式后自动关闭预览窗口”&lt;br&gt;let g:ycm_collect_identifiers_from_tags_files = 1           “ 开启 YCM基于标签引擎&lt;br&gt;let g:ycm_collect_identifiers_from_comments_and_strings = 1 “ 注释与字符串中的内容也用于补全&lt;br&gt;let g:syntastic_ignore_files=[“.*.py$”]&lt;br&gt;let g:ycm_seed_identifiers_with_syntax = 1                  “ 语法关键字补全&lt;br&gt;let g:ycm_complete_in_comments = 1&lt;br&gt;let g:ycm_confirm_extra_conf = 0                            “ 关闭加载.ycm_extra_conf.py提示&lt;br&gt;let g:ycm_key_list_select_completion = [‘&lt;c-n&gt;‘, ‘&lt;down&gt;‘]  “ 映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.&lt;br&gt;let g:ycm_key_list_previous_completion = [‘&lt;c-p&gt;‘, ‘&lt;up&gt;‘]&lt;br&gt;let g:ycm_complete_in_comments = 1                          “ 在注释输入中也能补全&lt;br&gt;let g:ycm_complete_in_strings = 1                           “ 在字符串输入中也能补全&lt;br&gt;let g:ycm_collect_identifiers_from_comments_and_strings = 1 “ 注释和字符串中的文字也会被收入补全&lt;br&gt;let g:ycm_global_ycm_extra_conf=’&lt;/up&gt;&lt;/c-p&gt;&lt;/down&gt;&lt;/c-n&gt;&lt;/del&gt;/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py’&lt;br&gt;let g:ycm_show_diagnostics_ui = 0                           “ 禁用语法检查&lt;br&gt;inoremap &lt;expr&gt; &lt;cr&gt; pumvisible() ? “&amp;lt;C-y&amp;gt;” : “&amp;lt;CR&amp;gt;”             “ 回车即选中当前项&lt;br&gt;nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;cr&gt;     “ 跳转到定义处&lt;br&gt;let g:ycm_min_num_of_chars_for_completion=2                 “ 从第2个键入字符就开始罗列匹配项&lt;br&gt;“&lt;/cr&gt;&lt;/c-j&gt;&lt;/cr&gt;&lt;/expr&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ssd核心技术</title>
    <link href="http://yoursite.com/uncategorized/ssd%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/uncategorized/ssd%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</id>
    <published>2019-11-26T06:13:56.000Z</published>
    <updated>2019-12-03T01:59:36.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闪存转换层Flash-Translation-Layer-FTL"><a href="#闪存转换层Flash-Translation-Layer-FTL" class="headerlink" title="闪存转换层Flash Translation Layer (FTL)"></a>闪存转换层Flash Translation Layer (FTL)</h2><p>传统块设备最小的读写单位是扇区，一般扇区大小为512byte，文件系统寻址的单位是块（size大于块），而ssd是闪存阵列，并不存在扇区，为了支持现有文件系统基于块的访问，ssd必须通过闪存转换层FTL来完成地址映射。</p><p>FTL映射方式有三种：</p><a id="more"></a><ol><li>块映射。闪存读写的最小单位是页，一个块可能有很多个页组成，采用块映射大文件读写性能很好，但每次读写小文件时依旧是读写一整个块，性能就会非常低。</li><li>页映射。页的数量远大于块的数量，采用页映射就需要更多的空间存储映射表（MAP TABLE）。例如，256GB的SSD存储空间，假设页大小为4KB，地址位数为32bit，则页的数量为256GB/4KB=64M，映射表的存储空间为64M×4B=256MB。一般来说，采用页映射方式，映射表的大小是存储空间大小的千分之一。</li><li>混合映射。</li></ol><p>闪存的物理特性：</p><ol><li>闪存不能update-in-place，也即，闪存不能即时更新，如果更新数据，必须先擦除原有数据，这和传统的HDD有很大不同。闪存按页为单位写入，以块为单位擦除。</li><li>闪存有擦除寿命，SLC擦除寿命有几十万次，而TLC擦除寿命只有数百次。我的台式机选择的是Intel 760p，就是TLC架构的，容量256GB。假设TLC擦除寿命为500次，在有磨损均衡的情况下可以最大写入（理论值），256GB×500=128000GB，如果每天写入10GB（很多时候每天的写入量远远低于10GB），则该SSD的理论寿命有128000GB/（10GB/天）=12800天=35年。</li><li>闪存天生是有坏块的，随着SSD的使用，还会不断的产生坏块。</li></ol><h2 id="垃圾回收Garbage-collection-GC"><a href="#垃圾回收Garbage-collection-GC" class="headerlink" title="垃圾回收Garbage collection (GC)"></a>垃圾回收Garbage collection (GC)</h2><ul><li><p>由于闪存在写入数据时必须擦除原有数据，这在SSD为空盘的情况下没有问题，直接往SSD写入数据即可。如果SSD没有空闲块，所有的块都有数据（有效数据或者无效数据），再往SSD写入数据必须擦除原有数据。无效数据可以直接擦除，有效数据重新写入。</p></li><li><p>在顺序写的情况下，无效数据相对集中，由于垃圾回收而导致的额外写入数据最少。顺序写可遇不可求，不过垃圾回收为防止造成写放大过大一般都是擦除有效数据最少的闪存块。</p></li></ul><p>以上强调了垃圾回收需要做到的两点，1. 找到有效数据最少的闪存块； 2. 从有效数据最少的闪存块找到有效数据所在的页。针对如何找到有效数据最少的闪存块，可以通过对所有闪存块设置一个有效数据标志计数。在每次写入一页数据时，该页原先映射的物理闪存块PBA有效数据标志减一，现在重新建立映射的物理闪存块PBA有效数据标志加一。而针对如何从有效数据最少的闪存块找到有效数据所在的页，可以对所有闪存块设置一个有效数据的bitmap。</p><p>什么时候做GC呢？有两种时机，一种是在host写入数据时，如果发现空闲块小于一定阈值，这种方式称之为前台垃圾回收；另一种是在没有写入请求时，由后台垃圾回收线程自动进行垃圾回收任务。昨天在venice的会议提到的balance_gc是前台垃圾回收，gc_thread_fn、gc_timer是后台垃圾回收。</p><h2 id="磨损均衡Wear-leveling"><a href="#磨损均衡Wear-leveling" class="headerlink" title="磨损均衡Wear leveling"></a>磨损均衡Wear leveling</h2><p>闪存有擦除寿命，如果对特定闪存块频繁擦写，会导致该闪存块在很短的时间就会失去电子特性而成为坏块。为了防止不断有闪存块成为坏块而导致SSD容量在额定使用寿命时间内急剧下降，FTL须提供磨损均衡算法。</p><p>磨损均衡算法同样分为两种方式，一种是静态磨损均衡，一种是动态磨损均衡。用户数据分为冷数据和热数据，冷数据是不会改变的数据或者很少改变的数据，热数据是需要经常改变的数据。静态磨损均衡是指把冷数据放在擦除次数较多的闪存块上，而热数据放在擦除次数较少的闪存块上。而动态磨损均衡是每次用户将数据写入擦除次数较      少的闪存块上。</p><h2 id="写放大Write-amplification"><a href="#写放大Write-amplification" class="headerlink" title="写放大Write amplification"></a>写放大Write amplification</h2><p>写放大是指host写入数据时，必须额外写入一些其他数据。在SSD为空盘时，如果是host顺序写，则直到满盘都不会写入额外数据。当没有空闲闪存块需要GC时，GC会擦除闪存块并把有效数据重新写回，此时的写放大计算：<br>$$<br>写放大=（GC重写有效数据+host写入数据）/ host写入数据<br>$$<br>写放大过大也即host写入数据时需要额外写入的数据过大，会导致闪存擦写次数上升，最终导致SSD寿命下降。写放大是SSD盘的一个重要指标。防止写放大过大，可以：</p><ol><li>增加预留闪存块，预留闪存块越多，则每个用户闪存块上的有效数据越少，在GC时需要写入的额外数据就越少，写放大越小。当然，预留闪存块也不能过大，这样分给host可写的闪存块就会太少；</li><li>GC策略，选择有效数据少的闪存块擦除</li><li>磨损均衡策略，同GC策略一样，都会搬移用户数据</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;闪存转换层Flash-Translation-Layer-FTL&quot;&gt;&lt;a href=&quot;#闪存转换层Flash-Translation-Layer-FTL&quot; class=&quot;headerlink&quot; title=&quot;闪存转换层Flash Translation Layer (FTL)&quot;&gt;&lt;/a&gt;闪存转换层Flash Translation Layer (FTL)&lt;/h2&gt;&lt;p&gt;传统块设备最小的读写单位是扇区，一般扇区大小为512byte，文件系统寻址的单位是块（size大于块），而ssd是闪存阵列，并不存在扇区，为了支持现有文件系统基于块的访问，ssd必须通过闪存转换层FTL来完成地址映射。&lt;/p&gt;&lt;p&gt;FTL映射方式有三种：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ssd" scheme="http://yoursite.com/tags/ssd/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://yoursite.com/uncategorized/hello-world/"/>
    <id>http://yoursite.com/uncategorized/hello-world/</id>
    <published>2019-11-24T01:11:31.000Z</published>
    <updated>2019-11-24T01:13:55.381Z</updated>
    
    <content type="html"><![CDATA[<p>Hello World!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello World!&lt;/p&gt;
      
    
    </summary>
    
    
    
      <category term="uncategories" scheme="http://yoursite.com/tags/uncategories/"/>
    
  </entry>
  
  <entry>
    <title>量化交易环境安装</title>
    <link href="http://yoursite.com/uncategorized/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/uncategorized/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</id>
    <published>2019-11-24T01:11:31.000Z</published>
    <updated>2019-11-24T10:30:34.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="量化交易环境安装"><a href="#量化交易环境安装" class="headerlink" title="量化交易环境安装"></a>量化交易环境安装</h1><h2 id="python环境管理anaconda"><a href="#python环境管理anaconda" class="headerlink" title="python环境管理anaconda"></a>python环境管理anaconda</h2><p>anaconda环境管理工具<a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">下载</a>，该工具在偶尔情况会出现卡在下图，这是该软件的一个bug。<img src="/images/1.jpg" alt></p><p>解决办法是下载最新的<a href="https://repo.anaconda.com/miniconda/" target="_blank" rel="noopener">miniconda</a>。anaconda太过于臃肿，这里强烈推荐miniconda。</p><ol><li><p>创建python3.5环境py3</p><p><code>conda create -n py3 python=3.5</code></p></li><li><p>激活py3</p><p><code>conda activate py3</code></p></li><li><p>验证</p><p><code>conda info -e</code></p></li></ol><a id="more"></a><h2 id="行情后端tushare"><a href="#行情后端tushare" class="headerlink" title="行情后端tushare"></a>行情后端tushare</h2><p>由于量化交易比较小众，tushare目前还是比较小众，如果直接<code>conda install tushare</code>可能会找不到tushare。可以通过anaconda.org找到tushare的安装命令，这里是通过给conda增加一个channel的方式，如下：</p><p><img src="/images/2.jpg" alt></p><p>选择排名最高的一个点进去，然后可以找到安装命令， <code>conda install -c waditu tushare</code> ，-c的意思是通过waditu的channel下载。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;量化交易环境安装&quot;&gt;&lt;a href=&quot;#量化交易环境安装&quot; class=&quot;headerlink&quot; title=&quot;量化交易环境安装&quot;&gt;&lt;/a&gt;量化交易环境安装&lt;/h1&gt;&lt;h2 id=&quot;python环境管理anaconda&quot;&gt;&lt;a href=&quot;#python环境管理anaconda&quot; class=&quot;headerlink&quot; title=&quot;python环境管理anaconda&quot;&gt;&lt;/a&gt;python环境管理anaconda&lt;/h2&gt;&lt;p&gt;anaconda环境管理工具&lt;a href=&quot;https://www.anaconda.com/distribution/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载&lt;/a&gt;，该工具在偶尔情况会出现卡在下图，这是该软件的一个bug。&lt;img src=&quot;/images/1.jpg&quot; alt&gt;&lt;/p&gt;&lt;p&gt;解决办法是下载最新的&lt;a href=&quot;https://repo.anaconda.com/miniconda/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;miniconda&lt;/a&gt;。anaconda太过于臃肿，这里强烈推荐miniconda。&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建python3.5环境py3&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda create -n py3 python=3.5&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;激活py3&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda activate py3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;验证&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda info -e&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="量化交易" scheme="http://yoursite.com/tags/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"/>
    
  </entry>
  
</feed>
